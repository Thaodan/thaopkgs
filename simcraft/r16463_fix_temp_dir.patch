--- src/simc-520-10-source/engine/sc_main.cpp	2013-05-16 23:45:02.273699556 +0200
+++ b/src/simc-520-10-source/engine/sc_main.cpp	2013-05-16 23:43:47.329692193 +0200
@@ -82,6 +82,43 @@
   return false;
 }
 
+/* Obtain a platform specific place to store the http cache file
+ */
+std::string get_cache_directory()
+{
+  std::string s = ".";
+
+  const char* env; // store desired environemental variable in here. getenv returns a null pointer if specified
+  // environemental variable cannot be found.
+#ifdef __linux__
+  env = getenv( "XDG_CACHE_HOME" );
+  if ( ! env )
+  {
+    env = getenv( "HOME" );
+    if ( env )
+      s = std::string( env ) + "/.cache";
+    else
+      s = "/tmp"; // back out
+  }
+  else
+    s = std::string( env );
+#endif
+#ifdef _WIN32
+  env = getenv( "TMP" );
+  if ( !env )
+  {
+    env = getenv( "TEMP" );
+    if ( ! env )
+    {
+      env = getenv( "HOME" );
+    }
+  }
+  s = std::string( env );
+#endif
+
+  return s;
+}
+
 } // anonymous namespace ====================================================
 
 // sim_t::main ==============================================================
@@ -90,7 +127,9 @@
 {
   sim_signal_handler_t handler( this );
 
-  http::cache_load( "simc_cache.dat" );
+  std::string cache_directory = get_cache_directory();
+
+  http::cache_load( ( cache_directory + DIRECTORY_DELIMITER + "simc_cache.dat" ).c_str() );
   dbc::init();
   module_t::init();
 
@@ -172,7 +211,7 @@
     fclose( output_file );
   output_file = 0;
 
-  http::cache_save( "simc_cache.dat" );
+  http::cache_save( ( cache_directory + DIRECTORY_DELIMITER + "simc_cache.dat" ).c_str() );
   dbc::de_init();
 
   return canceled;
