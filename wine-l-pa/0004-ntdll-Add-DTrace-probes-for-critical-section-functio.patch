From 45e39ce8f26fbcb822698d1b7b6170b5dc5b5e5d Mon Sep 17 00:00:00 2001
From: Andrea Canciani <ranma42@gmail.com>
Date: Thu, 3 May 2012 18:49:38 +0200
Subject: [PATCH 4/5] ntdll: Add DTrace probes for critical section functions

Plug DTrace probes into the ntdll critical section functions.
---
 dlls/ntdll/crit-provider.d |   26 ++++++++++++++++++++++++
 dlls/ntdll/critsection.c   |   47 +++++++++++++++++++++++++++++++++++++++++--
 2 files changed, 70 insertions(+), 3 deletions(-)
 create mode 100644 dlls/ntdll/crit-provider.d

diff --git a/dlls/ntdll/crit-provider.d b/dlls/ntdll/crit-provider.d
new file mode 100644
index 0000000..e819a3e
--- /dev/null
+++ b/dlls/ntdll/crit-provider.d
@@ -0,0 +1,26 @@
+/*
+ * DTrace provider for probes in ntdll critical section functions.
+ *
+ * Generate the header running:
+ *   dtrace -h -s crit-provider.d
+ *
+ */
+
+provider ntdllcrit {
+
+    /* Public functions entry points */
+
+    probe rtl__enter__critical__section__start( void *crit );
+    probe rtl__try__enter__critical__section__start( void *crit );
+    probe rtl__leave__critical__section__start( void *crit );
+
+    /* Public functions return points */
+
+    probe rtl__enter__critical__section__done( int r, void *crit );
+    probe rtl__try__enter__critical__section__done( int r, void *crit );
+    probe rtl__leave__critical__section__done( int r, void *crit );
+
+    /* Utility probes */
+
+    probe rtlp__wait__for__critical__section__timeout( void *crit );
+};
diff --git a/dlls/ntdll/critsection.c b/dlls/ntdll/critsection.c
index fb69b31..b865f67 100644
--- a/dlls/ntdll/critsection.c
+++ b/dlls/ntdll/critsection.c
@@ -30,6 +30,7 @@
 #include <sys/syscall.h>
 #endif
 #include <time.h>
+#include "crit-provider.h"
 #include "ntstatus.h"
 #define WIN32_NO_STATUS
 #include "windef.h"
@@ -440,6 +441,7 @@ NTSTATUS WINAPI RtlpWaitForCriticalSection( RTL_CRITICAL_SECTION *crit )
         if ( status == STATUS_TIMEOUT )
         {
             const char *name = NULL;
+	    NTDLLCRIT_RTLP_WAIT_FOR_CRITICAL_SECTION_TIMEOUT(crit);
             if (crit->DebugInfo) name = (char *)crit->DebugInfo->Spare[0];
             if (!name) name = "?";
             ERR( "section %p %s wait timed out in thread %04x, blocked by %04x, retrying (60 sec)\n",
@@ -525,7 +527,7 @@ NTSTATUS WINAPI RtlpUnWaitCriticalSection( RTL_CRITICAL_SECTION *crit )
  *  RtlDeleteCriticalSection(), RtlSetCriticalSectionSpinCount(),
  *  RtlLeaveCriticalSection(), RtlTryEnterCriticalSection()
  */
-NTSTATUS WINAPI RtlEnterCriticalSection( RTL_CRITICAL_SECTION *crit )
+static NTSTATUS WINAPI loggedRtlEnterCriticalSection( RTL_CRITICAL_SECTION *crit )
 {
     if (crit->SpinCount)
     {
@@ -579,7 +581,7 @@ done:
  *  RtlDeleteCriticalSection(), RtlEnterCriticalSection(),
  *  RtlLeaveCriticalSection(), RtlSetCriticalSectionSpinCount()
  */
-BOOL WINAPI RtlTryEnterCriticalSection( RTL_CRITICAL_SECTION *crit )
+static BOOL WINAPI loggedRtlTryEnterCriticalSection( RTL_CRITICAL_SECTION *crit )
 {
     BOOL ret = FALSE;
     if (interlocked_cmpxchg( &crit->LockCount, 0, -1 ) == -1)
@@ -615,7 +617,7 @@ BOOL WINAPI RtlTryEnterCriticalSection( RTL_CRITICAL_SECTION *crit )
  *  RtlDeleteCriticalSection(), RtlEnterCriticalSection(),
  *  RtlSetCriticalSectionSpinCount(), RtlTryEnterCriticalSection()
  */
-NTSTATUS WINAPI RtlLeaveCriticalSection( RTL_CRITICAL_SECTION *crit )
+static NTSTATUS WINAPI loggedRtlLeaveCriticalSection( RTL_CRITICAL_SECTION *crit )
 {
     if (--crit->RecursionCount) interlocked_dec( &crit->LockCount );
     else
@@ -629,3 +631,42 @@ NTSTATUS WINAPI RtlLeaveCriticalSection( RTL_CRITICAL_SECTION *crit )
     }
     return STATUS_SUCCESS;
 }
+
+NTSTATUS WINAPI RtlEnterCriticalSection( RTL_CRITICAL_SECTION *crit )
+{
+    NTSTATUS r;
+
+    NTDLLCRIT_RTL_ENTER_CRITICAL_SECTION_START(crit);
+
+    r = loggedRtlEnterCriticalSection(crit);
+
+    NTDLLCRIT_RTL_ENTER_CRITICAL_SECTION_DONE(r, crit);
+
+    return r;
+}
+
+NTSTATUS WINAPI RtlTryEnterCriticalSection( RTL_CRITICAL_SECTION *crit )
+{
+    NTSTATUS r;
+
+    NTDLLCRIT_RTL_TRY_ENTER_CRITICAL_SECTION_START(crit);
+
+    r = loggedRtlTryEnterCriticalSection(crit);
+
+    NTDLLCRIT_RTL_TRY_ENTER_CRITICAL_SECTION_DONE(r, crit);
+
+    return r;
+}
+
+NTSTATUS WINAPI RtlLeaveCriticalSection( RTL_CRITICAL_SECTION *crit )
+{
+    NTSTATUS r;
+
+    NTDLLCRIT_RTL_LEAVE_CRITICAL_SECTION_START(crit);
+
+    r = loggedRtlLeaveCriticalSection(crit);
+
+    NTDLLCRIT_RTL_LEAVE_CRITICAL_SECTION_DONE(r, crit);
+
+    return r;
+}
-- 
1.7.7.5 (Apple Git-26)

