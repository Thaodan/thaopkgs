# Maintainer: Jordan Johnston <triplesquarednine@gmail.com>
# Contributor: Joakim Hernberg <jhernberg@alchemy.lu>
# Contributor: Sven-Hendrik Haase <sh@lutzhaase.com>
# Contributor: Jan "heftig" Steffens <jan.steffens@gmail.com>
# Contributor: Eduardo Romero <eduardo@archlinux.org>
# Contributor: Giovanni Scafora <giovanni@archlinux.org>

pkgname=wine-l-pa
pkgver=1.5.27
pkgrel=1

_pkgbasever=${pkgver/rc/-rc}

source=(http://ibiblio.org/pub/linux/system/emulators/wine/wine-${_pkgbasever}.tar.bz2
        wine-rt-101107.patch
        wine-rt.install
        add-implementation-setProcessWorkingSetSize.patch
        ntdll-Use-pipes-for-synchronization-objects.patch
        NI-drag-and-drop.patch
        fix-broken-cross-compiled-winegcc.patch
        pipe-check-and-thread-safe-read.patch
        set-realtime-priority-without-wineserver.patch
        Expand-dos-has-entropy-in-order-to-make-collision-le.patch
        improve-IoRegisterDeviceInterface.patch
        Add-stub-for-IoSetDeviceInterfaceState.patch
        fix-obscured-windows.patch
        disable-winedbg-auto-crash-dialog.patch
        Fix-disk-geometry-ioctl.patch
        menu-border-color.patch
        If-a-child-of-the-window-being-disabled-is-the-captu.patch
        Add-stub-for-PoSetPowerState.patch
        force-32bit-usb-drivers-in-wine64.patch
        hack-for-Ivory-Library-Installer-force-GENERIC_xxx.patch
        disable-wine-prefix-update-window.patch
        capitalize-users-directory.patch
        ntdll-Fix-name-validation-for-pipes-bug-28995.patch
        avoid-deadlocks-imm-patch.patch
        L-defeat-dialog-box.patch
        0001-mmdevapi-Prevent-race-condition-upon-Start.patch
        0007-mciseq-Prevent-busy-wait-while-pausing.patch
        0008-mciseq-Pause-causes-an-ABORT-notification.patch
        0009-mciseq-Make-sure-MCI_WAIT-waits-for-the-player-to-t.patch
        0010-mciseq-Limit-concurrency-when-starting-to-play.patch
        0012-mciseq-Play-returns-the-error-code-from-midiOutOpen.patch
        0020-mciseq-Check-stop-condition-after-sleeping.patch
        0021-mciseq-Remain-responsive-while-processing-large-del.patch
        0023-mciseq-MCI_PLAY-does-not-reset-the-tempo-to-default.patch
        0024-mciseq-Read-the-tempo-from-the-file-when-opening-it.patch
        0025-mciseq-MCI-tempo-is-expressed-in-beats-per-minute.patch
        winmm-terminate-sysex-byte.patch
        dsound-rework-mixer-logic.patch
        dsound-mix-float-natively.patch
        dsound-mixer-wavequeue-checks.patch
        0003-ntdll-Add-DTrace-probes-for-heap-functions.patch
        0004-ntdll-Add-DTrace-probes-for-critical-section-functio.patch
        0005-ntdll-Provide-handle-to-trap-deadlocks-from-debugger.patch)


md5sums=('ac24b230e2a18556d21e7243ccb24283'
         '495b16901c0fac577f9b8cf8448e1c7d'
         'b2e3ba93933f64bd98a3aa8ec64ffcfd'
         '817b81193419ca4b417c8c8f06729b76'
         'da54d53fb4d2137d3a7314fbbe1025b2'
         '9e785adfe843c113bcbe41cacb82234f'
         'e7a3ac594c4fb4bc8b3b08046e50a483'
         '60b749b08cb95bf0c4ad16c46227f35e'
         'ecddc0e22f940567f003b1e481962113'
         'c29dd4f1cdda2d4175d07a68e29eb5e7'
         'ab544b1626760e73b7dcb5ca67bf9d45'
         '79b4726c57a2de7bc8c1eaafdab732ad'
         'd93b6a752caac30c2e497eef2f8b0bf9'
         '460cceb5b38d027ef9d914917cbb086b'
         'b8d955070a784ec29ed90c00af75453a'
         '572837f5d756809401e1a60178295a3d'
         '8ddfdea34ce5edd9e1afa13d37d223da'
         '538293d3e47a259a58db22c9d8c1d03f'
         '629179950454fc993a29382f27f95d77'
         '9e261bf63ba45b133393ecdfd51a619a'
         'bc9c5755c350a8afdaa296bd8cc52d7c'
         '6b03015993ddc36ffe95cfb9298a4b57'
         '1ac12284717594a1683c1d91c0ee41af'
         '88c726d976ed5ca0333d792da0e7bb07'
         'b6091c250b2399dc577cc1436db40d86'
         'd00c0864d11edfaa2b609282fa12d801'
         '8a70f7773d9364239939650d28575a0a'
         '1236ec750718c2f89c950462f59c1c25'
         'd352e531848ec9123714977b50192a30'
         'cac7a4c02cc526f7df6ec4e241859197'
         'a1e72dbe31e7eb212b140fca71b1e064'
         '1507c571f155202db95b89105c24c542'
         '5833bcab85a06e2d947105095d9d50b9'
         '9850a793cf670d2fc1b419a397c9193f'
         'ede42fe52def0c1c926291df9f3f2c05'
         '71caa3a934735d4f68e28d8ee04a9d37'
         '3d9e0ca053085d3a09e50c8bb9dd30d6'
         '279cc811b875b7cade5c60d6cda29bff'
         '9c566c9da5e6bf47267e07a4ea06b22d'
         '50382190d0b6b5972b81710888d29972'
         'd2901fbbfdec1038eed2e95898868a92'
         '44b1e90c2f5f65400d517c23243cad46'
         '0792a8ceb7ca98038cf93e8ca11c8a98')

pkgdesc="Wine-L_pa: Wine geared for Proaudio"
url="https://sourceforge.net/projects/l-proaudio/"
arch=(i686 x86_64)
license=(LGPL)
install=wine-rt.install

depends=(
  fontconfig      lib32-fontconfig
  mesa            lib32-mesa 
  libxcursor      lib32-libxcursor
  libxrandr       lib32-libxrandr
  libxdamage      lib32-libxdamage
  libxi           lib32-libxi
  gettext         lib32-gettext
  desktop-file-utils
)

makedepends=(autoconf ncurses bison perl fontforge flex prelink
  'gcc>=4.5.0-2'  'gcc-multilib>=4.5.0-2'
  giflib          lib32-giflib
  libpng          lib32-libpng
  gnutls          lib32-gnutls
  libxinerama     lib32-libxinerama
  libxcomposite   lib32-libxcomposite
  libxmu          lib32-libxmu
  libxxf86vm      lib32-libxxf86vm
  libxml2         lib32-libxml2
  libldap         lib32-libldap
  lcms            lib32-lcms
  mpg123          lib32-mpg123
  openal          lib32-openal
  v4l-utils       lib32-v4l-utils
  alsa-lib        lib32-alsa-lib
)
  
optdepends=(
  giflib          lib32-giflib
  libpng          lib32-libpng
  libldap         lib32-libldap
  gnutls          lib32-gnutls
  lcms            lib32-lcms
  libxml2         lib32-libxml2
  mpg123          lib32-mpg123
  openal          lib32-openal
  v4l-utils       lib32-v4l-utils
  libpulse        lib32-libpulse
  alsa-plugins    lib32-alsa-plugins
  alsa-lib        lib32-alsa-lib
)

if [[ $CARCH == i686 ]]; then
  provides=("wine=$pkgver")
  conflicts=('wine wine-rt')
  replaces=('wine wine-rt')

  # Strip lib32 etc. on i686
  depends=(${depends[@]/*32-*/})
  makedepends=(${makedepends[@]/*32-*/})
  makedepends=(${makedepends[@]/*-multilib*/})
  optdepends=(${optdepends[@]/*32-*/})
else
  provides=("wine=$pkgver" "bin32-wine=$pkgver" "wine-wow64=$pkgver")
  conflicts=('wine' 'bin32-wine' 'wine-wow64')
  replaces=('wine' 'bin32-wine')
fi

build() {
  if [ -f "$srcdir//wine-$pkgver/README.WINE-RT" ]
  then
    rm  "$srcdir//wine-$pkgver/README.WINE-RT"
  fi


  cd "$srcdir/wine-$_pkgbasever"

  # * L_Pa-Wine sync_pipe and L_RT_THREADS patchwork
  # *
  # * You absolutely need these patches for L_Pa-Wine to actually be useful ;)

  msg "Applying ntdll-Use-pipes-for-synchronization.patch"
  patch -s -Np1 -i $srcdir/ntdll-Use-pipes-for-synchronization-objects.patch

  msg "...     SUCCESS :)"

  msg "Applying pipe-thread-safe.patch"
  patch -s -Np1 -i $srcdir/pipe-check-and-thread-safe-read.patch

  msg "   ...  SUCCESS :)"

  msg "Applying set-realtime-priority-without-wineserver.patch"
  patch -s -Np1 -i $srcdir/set-realtime-priority-without-wineserver.patch

  msg "    ... SUCCESS :)"

  msg "add-implementation-setProcessWorkingSetSize.patch"
  patch -s -Np1 -i $srcdir/add-implementation-setProcessWorkingSetSize.patch

  msg "..    . SUCCESS :)"
  
  # * defeat/disable dialog and update window (comment/uncomment)
  # *
  # * these are optional. they allow you to disable dialog / update window, if desired.

 msg "Applying disable-wine-prefix-update-window.patch"
  patch -s -Np1 -i $srcdir/disable-wine-prefix-update-window.patch

  msg ".      SUCCESS :)"

  msg "Applying L-defeat-dialog-box.patch"
  patch -s -Np1 -i $srcdir/L-defeat-dialog-box.patch

  msg "  ...   SUCCESS :)"

  # * Hacks / patchwork to fix bugs
  # *
  # * you should use these too, since they fix annoying bugs, improve wine and/or help specific 
  # * installers / apps to work properly.

  msg "Applying NI-drag-drop patch"
  patch -s -Np1 -i $srcdir/NI-drag-and-drop.patch

  msg " ...    SUCCESS :)"

  msg "Applying winegcc patch"
  patch -s -Np1 -i $srcdir/fix-broken-cross-compiled-winegcc.patch

  msg "  ...   SUCCESS :)"

  msg "Applying expand-dos-has-entropy-to-make-less-collision.patch"
  patch -s -Np1 -i $srcdir/Expand-dos-has-entropy-in-order-to-make-collision-le.patch

  msg "     .. SUCCESS :)"

  msg "Applying improve-IoRegisterDeviceInterface.patch"
  patch -s -Np1 -i $srcdir/improve-IoRegisterDeviceInterface.patch

  msg ".       SUCCESS :)"

  msg "Applying Add-stub-for-IoSetDeviceInterfaceState.patch"
  patch -s -Np1 -i $srcdir/Add-stub-for-IoSetDeviceInterfaceState.patch

  msg "..      SUCCESS :)"

  msg "Applying fix-obscured-windows.patch"
  patch -s -Np1 -i $srcdir/fix-obscured-windows.patch

  msg "...     SUCCESS :)"
 
  msg "Applying disable-winedbg-auto-crash-dialog.patch"
  patch -s -Np1 -i $srcdir/disable-winedbg-auto-crash-dialog.patch

  msg "...     SUCCESS :)"

  msg "Applying Fix disk geomtery.ioctl"
  patch -s -Np1 -i $srcdir/Fix-disk-geometry-ioctl.patch

  msg "  ...   SUCCESS :)"

  msg "Applying menu-border-color.patch"
  patch -s -Np1 -i $srcdir/menu-border-color.patch

  msg "   ...  SUCCESS :)"

  msg "Applying child-window-is-capture-give-WM_CANCELMODE.patch"
  patch -s -Np1 -i $srcdir/If-a-child-of-the-window-being-disabled-is-the-captu.patch

  msg "     .. SUCCESS :)"

  msg "Applying stub-for-PoPowerState.patch"
  patch -s -Np1 -i $srcdir/Add-stub-for-PoSetPowerState.patch

  msg "..      SUCCESS :)"

  msg "Applying capitalize-users-directory.patch"
  patch -s -Np1 -i $srcdir/capitalize-users-directory.patch

  msg " ...    SUCCESS :)"

  msg "Applying hack-for-Ivory-Library-Installer-force-GENERIC_xxx.patch"
  patch -s -Np1 -i $srcdir/hack-for-Ivory-Library-Installer-force-GENERIC_xxx.patch

  msg "  ...   SUCCESS :)"

  msg "Applying ntdll-Fix-name-validation-for-pipes-bug-28995.patch"
  patch -s -Np1 -i $srcdir/ntdll-Fix-name-validation-for-pipes-bug-28995.patch

  msg "   ...  SUCCESS :)"

  msg "Applying avoid-deadlocks-imm.patch"
  patch -s -Np1 -i $srcdir/avoid-deadlocks-imm-patch.patch

  msg "    ..  SUCCESS :)"

  # * L_Pa-Wine Wow64 stuff. Mainly applicable to Wow64 setups / wow64 corner-cases
  # *
  # * 3-to-4g patch is likely not needed, just a patch i am/was curious about. the others may be 
  # * useful but need further testing. they do not seem to cause any regressions, in my testing. so 
  # * they are available. Uncomment to use:

  msg "Applying 0065-force-32bit-usb-drivers-in-wine64.patch"
  patch -s -Np1 -i $srcdir/force-32bit-usb-drivers-in-wine64.patch

  msg "...     SUCCESS :)"


  # * Mciseq / Midi patchwork not (yet) included in Wine / being reviewed.
  # *
  # * Does not seem to cause any regressions, so i am making patches enabled by default.

  msg "Applying 0001-mmdevapi-Prevent-race-condition-upon-Start.patch"
  patch -s -Np1 -i $srcdir/0001-mmdevapi-Prevent-race-condition-upon-Start.patch

  msg ".        SUCCESS :)"

  msg "Applying 0007-mciseq-Prevent-busy-wait-while-pausing.patch"
  patch -s -Np1 -i $srcdir/0007-mciseq-Prevent-busy-wait-while-pausing.patch

  msg " ..     SUCCESS :)"

  msg "Applying 0008-mciseq-Pause-causes-an-ABORT-notification.patch"
  patch -s -Np1 -i $srcdir/0008-mciseq-Pause-causes-an-ABORT-notification.patch

  msg "  ..    SUCCESS :)"

  msg "Applying 0009-mciseq-Make-sure-MCI_WAIT-waits-for-the-player-to-t.patch"
  patch -s -Np1 -i $srcdir/0009-mciseq-Make-sure-MCI_WAIT-waits-for-the-player-to-t.patch

  msg "    ..  SUCCESS :)"

  msg "Applying 0010-mciseq-Limit-concurrency-when-starting-to-play.patch patch"
  patch -s -Np1 -i $srcdir/0010-mciseq-Limit-concurrency-when-starting-to-play.patch

  msg "     .. SUCCESS :)"

  msg "Applying 0012-mciseq-Play-returns-the-error-code-from-midiOutOpen.patch"
  patch -s -Np1 -i $srcdir/0012-mciseq-Play-returns-the-error-code-from-midiOutOpen.patch

  msg "      . SUCCESS :)"

  msg "Applying 0020-mciseq-Check-stop-condition-after-sleeping.patch"
  patch -s -Np1 -i $srcdir/0020-mciseq-Check-stop-condition-after-sleeping.patch

  msg ".       SUCCESS :)"

  msg "Applying 0021-mciseq-Remain-responsive-while-processing-large-del.patch"
  patch -s -Np1 -i $srcdir/0021-mciseq-Remain-responsive-while-processing-large-del.patch

  msg " .      SUCCESS :)"

  msg "Applying 0023-mciseq-MCI_PLAY-does-not-reset-the-tempo-to-default.patch"
  patch -s -Np1 -i $srcdir/0023-mciseq-MCI_PLAY-does-not-reset-the-tempo-to-default.patch

  msg "  .     SUCCESS :)"

  msg "Applying 0024-mciseq-Read-the-tempo-from-the-file-when-opening-it.patch"
  patch -s -Np1 -i $srcdir/0024-mciseq-Read-the-tempo-from-the-file-when-opening-it.patch

  msg "   .    SUCCESS :)"

  msg "Applying 0025-mciseq-MCI-tempo-is-expressed-in-beats-per-minute.patch"
  patch -s -Np1 -i $srcdir/0025-mciseq-MCI-tempo-is-expressed-in-beats-per-minute.patch

  msg "    .   SUCCESS :)"

  msg "Applying wmm-midi-sysex-terminate-byte.patch"
  patch -s -Np1 -i $srcdir/winmm-terminate-sysex-byte.patch

  msg "     .  SUCCESS :)"

  # * Dsound fixes / patchwork
  # * 
  # * Does not seem to cause any regressions, so i am making these patches enabled by default.

  msg "Applying dsound-rework-mixer-logic.patch"
  patch -s -Np1 -i $srcdir/dsound-rework-mixer-logic.patch

  msg "      . SUCCESS :)"

  msg "Applying dsound-mix-float-natively.patch"
  patch -s -Np1 -i $srcdir/dsound-mix-float-natively.patch

  msg "     .  SUCCESS :)"

  msg "Applying dsound-mixer-wavequeue-checks.patch"
  patch -s -Np1 -i $srcdir/dsound-mixer-wavequeue-checks.patch

  msg "    .   SUCCESS :)"

  # * Dtrace support - you must have dtrace already working to use this! (ie: the compile will 
  # * fail if you dont.) I provide ZERO support, you are on your own AND really, *this is only 
  # * applicable to people hacking on / performance testing L_Pa-Wine*. Uncomment to use:

#  msg "Applying 0003-ntdll-Add-DTrace-probes-for-heap-functions.patch"
#  patch -s -Np1 -i $srcdir/0003-ntdll-Add-DTrace-probes-for-heap-functions.patch
#
#  msg "    .   SUCCESS :)"
#
#  msg "Applying 0004-ntdll-Add-DTrace-probes-for-critical-section-functio.patch"
#  patch -s -Np1 -i $srcdir/0004-ntdll-Add-DTrace-probes-for-critical-section-functio.patch
#
#  msg "    ..  SUCCESS :)"
#
#  msg "Applying 0005-ntdll-Provide-handle-to-trap-deadlocks-from-debugger.patch"
#  patch -s -Np1 -i $srcdir/0005-ntdll-Provide-handle-to-trap-deadlocks-from-debugger.patch
#
#  msg "   ..   SUCCESS :)"
#

  # * Enable Wine-rt patch
  # *
  # *

  msg "Applying Wine-rt patch"
  patch -s -Np1 -i $srcdir/wine-rt-101107.patch

  msg " .      SUCCESS :)
______________________________________________________________

(IF) ALL PATCHES APPLIED SUCCESSFULLY ....

        ....   L_Pa-WINE IS READY (FOR COMPILATION)
______________________________________________________________
"
  sleep 3

  cd "$srcdir"

  # Allow ccache to work
  mv wine-$_pkgbasever wine

  # Get rid of old build dirs
  rm -rf wine-{32,64}-build
  mkdir wine-32-build

  #This is unneeded as wine itself takes care of it

  # These additional CFLAGS solve FS#27662
  #export CFLAGS="${CFLAGS/-D_FORTIFY_SOURCE=2/} -D_FORTIFY_SOURCE=0"
  #export CXXFLAGS="${CFLAGS/-D_FORTIFY_SOURCE=2/} -D_FORTIFY_SOURCE=0"

  if [[ $CARCH == x86_64 ]]; then
    msg2 "Building Wine-64..."

    mkdir wine-64-build
    cd "$srcdir/wine-64-build"
    ../wine/configure \
      --prefix=/usr \
      --with-opencl \
      --with-mpg123 \
      --disable-tests \
      --libdir=/usr/lib \
      --enable-win64

    make

    _wine32opts=(
      --libdir=/usr/lib32
      --with-wine64="$srcdir/wine-64-build"
    )

    export PKG_CONFIG_PATH="/usr/lib32/pkgconfig"
  fi

  msg2 "Building Wine-32..."
  cd "$srcdir/wine-32-build"
  ../wine/configure \
    --prefix=/usr \
    --disable-tests \
    --with-opencl \
    --with-mpg123 \
    --without-gstreamer \
    "${_wine32opts[@]}"

  # These additional CFLAGS solve FS#27560
  make CFLAGS+="-mstackrealign" CXXFLAGS+="-mstackrealign"
}

package() {
  msg2 "Packaging Wine-32..."
  cd "$srcdir/wine-32-build"

  if [[ $CARCH == i686 ]]; then
    make prefix="$pkgdir/usr" install
  else
    make prefix="$pkgdir/usr" \
      libdir="$pkgdir/usr/lib32" \
      dlldir="$pkgdir/usr/lib32/wine" install

    msg2 "Packaging Wine-64..."
    cd "$srcdir/wine-64-build"
    make prefix="$pkgdir/usr" \
      libdir="$pkgdir/usr/lib" \
      dlldir="$pkgdir/usr/lib/wine" install
  fi

  mkdir -p "$pkgdir/usr/share/doc/wine-rt"
  cp "$srcdir/wine/README.WINE-RT" "$pkgdir/usr/share/doc/wine-rt"
}

# vim:set ts=8 sts=2 sw=2 et:
